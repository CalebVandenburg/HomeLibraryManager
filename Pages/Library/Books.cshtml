@page
@model HomeLibraryManager.Pages.Library.BooksModel

@{
    ViewData["Title"] = "Library";
}

<h1>Library</h1>

<p>
    <input type="button" class="btn btn-danger" onclick="DeleteSelected()" value="Delete Selected" id="deleteSelectedButton" />
</p>
<table class="table" id="bookListTable">
    <thead>
        <tr>
            <th><input id="selectAllCheckbox" onchange="ToggleSelected(this)" type="checkbox"></th>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].Publisher)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].ISBN10) - @Html.DisplayNameFor(model => model.Books[0].ISBN13)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].Authors)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].PublishedDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].PageCount)
            </th>
        </tr>
    </thead>
    <tbody>
        @if(Model.Books != null && Model.Books.Count() > 0)
        {
            @foreach (var item in Model.Books)
        {
            <tr>
                <td><input class="singleCheckbox" onchange="ToggleSelectAll()"  type="checkbox" data-bookid="@item.BookId"></td>
                <td>
                    <img class="libraryListBookThumbnail" src="@Html.ValueFor(modelItem => item.SmallThumbnail)">
                </td>
                <td onclick="location.href='/Library/Book?id=@item.BookId'">
                    <u>@Html.DisplayFor(modelItem => item.Title)</u>
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Publisher)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ISBN10) - @Html.DisplayFor(modelItem => item.ISBN13)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Authors)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PublishedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PageCount)
                </td>
            </tr>
        }
        }
        
    </tbody>
</table>
<script>
     function ToggleSelected(checkbox) {

         var checkedBooks = document.getElementsByClassName('singleCheckbox');

         for (let item of checkedBooks) {
            if(checkbox.checked) {
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }
     }
     function ToggleSelectAll() {
         var newSelectState = true;
         var checkedBooks = document.getElementsByClassName('singleCheckbox');

         for (let item of checkedBooks) {
            if(!item.checked) {
                newSelectState = false;
                break;
            }
        }
        document.getElementById("selectAllCheckbox").checked = newSelectState;
     }
     function DeleteSelected() {
        var checkedBooks = document.getElementsByClassName('singleCheckbox');
        console.log(checkedBooks);
        var itemsToDelete = [];
        for (let item of checkedBooks) {
            console.log(item);
            if(item.checked) {

                itemsToDelete.push(parseInt(item.getAttribute("data-bookid")));
            }
        }
        console.log(itemsToDelete);
        fetch('/Library/Books?handler=Delete', {
            method: 'post',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(itemsToDelete)
        })
        .then((response) =>  {
            console.log(response);
            if(response.status == 200) {
                location.reload(true);
            }
            else {
                return response.text();
            }
        })
         .then(text => {
             if(text != undefined && text != null) {
                alert(text);
             }
          })
        return false;
    }
</script>
