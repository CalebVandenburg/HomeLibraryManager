@page
@model HomeLibraryManager.Pages.Library.BooksModel

@{
    ViewData["Title"] = "My Shelf";
}

<h1>My Shelf</h1>
<div class="shelfButtons">

    <input type="button" class="btn btn-danger" onclick="DeleteSelected()" value="Delete Selected" id="deleteSelectedButton" />
    <div class="shelfFormatToggleContainer">
        <button type="button" class="btn cardToggle" onclick="ToggleViewFormat(this)">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-grid-3x3-gap-fill" viewBox="0 0 16 16">
                <path d="M1 2a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V2zM1 7a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V7zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1V7zM1 12a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H2a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1v-2zm5 0a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-2a1 1 0 0 1-1-1v-2z" />
            </svg>
        </button>

        <button type="button" class="btn tableToggle " data-active="true" onclick="ToggleViewFormat(this)">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-table" viewBox="0 0 16 16">
                <path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm15 2h-4v3h4V4zm0 4h-4v3h4V8zm0 4h-4v3h3a1 1 0 0 0 1-1v-2zm-5 3v-3H6v3h4zm-5 0v-3H1v2a1 1 0 0 0 1 1h3zm-4-4h4V8H1v3zm0-4h4V4H1v3zm5-3v3h4V4H6zm4 4H6v3h4V8z" />
            </svg>
        </button>
    </div>
</div>
<table class="table" id="bookListTable" data-format="card">
    <thead>
        <tr>
            <th><input id="selectAllCheckbox" onchange="ToggleSelected(this)" type="checkbox"></th>
            <th></th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].Publisher)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].ISBN10) - @Html.DisplayNameFor(model => model.Books[0].ISBN13)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].Authors)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].PublishedDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Books[0].PageCount)
            </th>
        </tr>
    </thead>
    <tbody>
        @if(Model.Books != null && Model.Books.Count() > 0)
        {
            @foreach (var item in Model.Books)
        {
            <tr>
                <td><input class="singleCheckbox" onchange="ToggleSelectAll()"  type="checkbox" data-bookid="@item.BookId"></td>
                    <td class="libraryListBookThumbnailTD">
                    <img class="libraryListBookThumbnail" src="@Html.ValueFor(modelItem => item.SmallThumbnail)">
                </td>
                <td  class="linkingTD" onclick="location.href='/Library/Book?id=@item.BookId'">
                    @Html.DisplayFor(modelItem => item.Title)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Publisher)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.ISBN10) - @Html.DisplayFor(modelItem => item.ISBN13)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Authors)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PublishedDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PageCount)
                </td>
            </tr>
        }
        }
        
    </tbody>
</table>
<script>
    function ToggleViewFormat(button) {
        if (!button.dataset.active == true) {
            console.log("selected different state");
            if(button.nextElementSibling != undefined) {
                console.log("clicked on card");
            }
            else {

                console.log("clicked on table");
            }
        }
    }
     function ToggleSelected(checkbox) {

         var checkedBooks = document.getElementsByClassName('singleCheckbox');

         for (let item of checkedBooks) {
            if(checkbox.checked) {
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }
     }
     function ToggleSelectAll() {
         var newSelectState = true;
         var checkedBooks = document.getElementsByClassName('singleCheckbox');

         for (let item of checkedBooks) {
            if(!item.checked) {
                newSelectState = false;
                break;
            }
        }
        document.getElementById("selectAllCheckbox").checked = newSelectState;
     }
     function DeleteSelected() {
        var checkedBooks = document.getElementsByClassName('singleCheckbox');
        console.log(checkedBooks);
        var itemsToDelete = [];
        for (let item of checkedBooks) {
            console.log(item);
            if(item.checked) {

                itemsToDelete.push(parseInt(item.getAttribute("data-bookid")));
            }
        }
        console.log(itemsToDelete);
        fetch('/Library/Books?handler=Delete', {
            method: 'post',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(itemsToDelete)
        })
        .then((response) =>  {
            console.log(response);
            if(response.status == 200) {
                location.reload(true);
            }
            else {
                return response.text();
            }
        })
         .then(text => {
             if(text != undefined && text != null) {
                alert(text);
             }
          })
        return false;
    }
</script>
